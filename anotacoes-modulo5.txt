		
		FLEX BOX

Caixas flexíveis. Muito simples o conceito:
Dentro de uma caixa, há outras caixas que irão se adaptar conforme o tamanho da caixa maior. Isso automaticamente.

Pra isso, você colocará "display: flex;" no conteiner maior(conteiner pai) e flex auto nas caixas internas(filhos).
Exemplo básico:
 <style>
        div.conteiner{
            background-color: blanchedalmond;
            padding: 5px;
            display: flex;
            border: 1px solid black;
        }
        
        div.item{
            background-color: aquamarine;
            text-align: center;
            margin: 2px;
            flex: auto;
            border: 1px dashed black;
        }
    </style>
</head>
<body>
    <h1>Fleexx</h1>
    <div class="conteiner">
        <div class="item">A</div>
        <div class="item">B</div>
        <div class="item">C</div>
        <div class="item">D</div>
        <div class="item">F</div>
        <div class="item">G</div>
    </div>
</body>

		FLEX DIRECTION

Flex-direction é usado no conteiner pai e a direção é da esquerda para a direita.
PADRÃO: flex-direction: row;
DIREÇÂO INVERSA: flex-direction: row-reverse;
VERTICAL: flex-direction: column;(padrão de direção: de cima pra baixo)
VERTICAL DIREÇÃO INVERSA: flex-direction: column-reverse;

		EIXOS
Quando você escolhe uma direção, são criados 2 eixos(axis): main-axis(eixo principal, da esquerda pra direita)
com pontos principais: main-start e main-end. cross-axis(eixo transversal, de cima pra baixo) com pontos principais:
cross-start e cross-end.

   Quando você inverte a direção, o main-axis é invertido. Se você coloca row-reverse, o main-start e o main-end se invertem.
Já o cross-axis não é invertido. CONSULTAR AULA 3, MÓDULO 5, Tempo 10:45.

		FLEX WRAP
Comando utilizado no container pai que vai definir o comportamento desse container. Configuração PADRÃO: nowrap;
No nowrap ele não quebra o conteúdo, ou seja, se o container for diminuído e ficar menor que a quantidade de itens,
os itens encolherão.

Flex-wrap: wrap; <-- Com esse comando dentro do container pai, os itens irão quebrar caso o conteiner fique menor
que o tamanho dos itens de dentro. Quebrando no eixo vertical(cross-axis). Ou seja: o último item irá ir para o sentido
do eixo transversal.

Flex-wrap: wrap-reverse: irá quebrar os itens, mas pro sentido oposto ao eixo transversal.

	FLEX FLOW

Flex-flow é um shorthand para flexdirection e flexwrap. Exemplo: flex-flow: row wrap.

	JUSTIFY CONTENT E ALIGN ITENS

   --> Justify-content: vai fazer o alinhamento dos itens em relação ao main-axis(eixo x no row, eixo y no column).

- flex-start: o primeiro item ficará colado exatamente no main-start.

-- flex-end: o ÚLTIMO item ficará grudado no main-end.

- flex-center: os itens ficarão centralizados(não estipula espaço entre os itens, diferente dos abaixo).

-- space-between: com essa propriedade, o primeiro item ficará no main-start e o último ficará no main-end. Os outros itens
ficarão distribuídos com espaçamento iguais.

- space-evenly: os elementos ficarão com espaçamento iguais.

-- space-around: esse comando dividirá o conteiner pelo número de itens que tem nele e vai centralizar os itens dentro
desse espaço calculado, fazendo com que o espaço da borda esquerda e direita em relação ao primeiro e ao último item,
tenha um espaçamento de 1x, e o itens com um espaçamento entre si de 2x.

Resumo:
 space-between: o primeiro e o ultimo elemento colado nas bordas.
 space-evenly: todos os itens com o mesmo espaçamento.
 space-around: primeiro e ultimo elemento com espaçamento menor nas bordas.

  --> Align-itens: vai fazer o alinhamento dos itens em relação ao cross-axis(eixo y no row, eixo x no column).

- stretch: vai esticar os itens ao tamanho do cross-axis.

-- start: ele vai grudar sempre no start do main-axis.

- center: vai alinhas ele no centro do cross-axis.


	ALIGN CONTENT
Não é justify-content nem align-items. É ALIGN CONTENT!!
Ele irá alinhar os conteúdos que estão com wrap, ou seja, quando o conteiner "quebrar", ele entrará em ação alinhando o item
que foi "responsável" pela quebra.

 -stretch: ele irá esticar os itens.

---start: colará o item colado ao main-start.

 -end: todos os itens no main-end.

---center: centro.

 -space-between: mesma coisa que o do justify, só que no eixo transversal(cross-axis).

---space-evenly: mesma coisa... só que no eixo transversal.

 -space-aroud: sim, só que no eixo transversal.


	DIFERENÇA ENTRE ALIGN-CONTENT E JUSTIFY-CONTENT:

O justify-content é utilizado quando o conteiner é NOWRAP. Já o align-content é utilizado quando o conteiner é WRAP!

	FLEX-ITEMS

   Por padrão, os itens não são flexíveis, poréeem... existem sim propriedades para os itens. Order é uma dessas
propriedades dos itens, onde você consegue definir a ordem de exibição dos mesmos.
order: 0 -> padrão
Colocando um style dentro da div -> <div class="item" style="order: -3"> você começa a estabelecer ordem de posição.

	Align-self: se aplica a cada um dos itens. Cada item pode ter um alinhamento diferente. Ele funcionará diretamente
no cross-axis.

auto: herdará a característica de alinhamento vertical do pai(conteiner).
flex-start: alinhamento perto do cross-start.
flex-end: alinhamento perto do cross-end.
center: o meio no eixo transversal.
stretch: vai esticar.

	Flex-basis

 -auto: a largura dos itens depende do conteúdo que está dentro.
---estabelecendo um tamanho em píxel: será o tamanho estabelecido independente do conteúdo do item. Porém ele não permanece
assim independente da situação, porque se você diminuir muito o conteiner, o tamanho dos itens diminuirá. É assim que
funciona o flex-basis com um tamanho estabelecido.
 

	Mais propriedade pros itens...

flex-shrink: 1 (padrão)
flex-grow: 0 (padrão)

Os parâmetros são 0 e N. Se tiver 0 não pode, se tiver N então pode. Então, colocando 1 nesses dois parâmetros
você tem itens completamente flexíveis e proporcionais.

Isso você pode colocar em itens específicos ou pra todos os itens! E com isso você tem possibilidades de crescimento.
Como assim? Bom, você consegue estabelecer quanto um item irá crescer com o comando flex-grow, ou flex-shrink.
Exemplo:

<div id="item1">A</div>
<div id="item2">B</div>

Se colocarmos no item1 flex-grow: x; e no item2 flex-grow: 2x; o item2 irá crescer o dobro do item1.


	Propriedade flex:
Flex é uma shorthand que abrange flex-grow, flex-shrink e o tamanho do item, nessa ordem. Então um flex: 0 1 150px significa
que o item tem flex-grow: 0, flex-shrink: 1, e 150px de tamanho!

mais sobre flex...

flex: 0 1 auto(padrão); --> flex: initial
flex: 0 0 auto; --> flex: none
flex 1 1 auto; --> flex: auto;

Em alguns códigos tem escrito flex: 3 ou algo do tipo. Nesses casos, o número vale pro grow, e quanto ao shrink e o basis
são padrão. Então flex: 3 nada mais é que: flex: 3 1 auto;



